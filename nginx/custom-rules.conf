# Custom ModSecurity Rules for Buildkite Overview Application
# These rules are specific to the application's security requirements

# Rule ID range: 10000-19999 (custom application rules)

# === WEBHOOK SECURITY ===

# Validate Buildkite webhook token
SecRule REQUEST_URI "@beginsWith /api/webhooks/buildkite" \
    "id:10001,\
    phase:1,\
    block,\
    msg:'Invalid or missing webhook token',\
    logdata:'URI: %{REQUEST_URI}, Remote: %{REMOTE_ADDR}',\
    chain"
SecRule &REQUEST_HEADERS:X-Buildkite-Token "@eq 0" \
    "t:none"

# Ensure webhook requests have proper content type
SecRule REQUEST_URI "@beginsWith /api/webhooks/buildkite" \
    "id:10002,\
    phase:1,\
    block,\
    msg:'Invalid webhook content type',\
    logdata:'Content-Type: %{REQUEST_HEADERS.Content-Type}',\
    chain"
SecRule REQUEST_HEADERS:Content-Type "!@beginsWith application/json"

# Limit webhook payload size (5MB max)
SecRule REQUEST_URI "@beginsWith /api/webhooks/buildkite" \
    "id:10003,\
    phase:1,\
    block,\
    msg:'Webhook payload too large',\
    logdata:'Content-Length: %{REQUEST_HEADERS.Content-Length}',\
    chain"
SecRule REQUEST_HEADERS:Content-Length "@gt 5242880"

# === AUTHENTICATION SECURITY ===

# Block common OAuth attack patterns
SecRule REQUEST_URI "@beginsWith /auth/callback" \
    "id:10010,\
    phase:1,\
    block,\
    msg:'Suspicious OAuth callback parameters',\
    logdata:'Args: %{ARGS}',\
    chain"
SecRule ARGS "@detectSQLi"

# Rate limit OAuth flows more aggressively
SecRule REQUEST_URI "@rx ^/auth/(login|logout|callback)" \
    "id:10011,\
    phase:1,\
    pass,\
    msg:'OAuth endpoint access',\
    setvar:ip.auth_requests=+1,\
    expirevar:ip.auth_requests=300"

SecRule IP:AUTH_REQUESTS "@gt 10" \
    "id:10012,\
    phase:1,\
    block,\
    msg:'Too many OAuth requests',\
    logdata:'Requests: %{ip.auth_requests}, Remote: %{REMOTE_ADDR}',\
    expirevar:ip.auth_requests=3600"

# === LOG SECURITY ===

# Prevent log injection attacks
SecRule REQUEST_URI "@beginsWith /api/pipelines/" \
    "id:10020,\
    phase:2,\
    block,\
    msg:'Log injection attempt detected',\
    logdata:'Args: %{ARGS}',\
    chain"
SecRule ARGS "@detectXSS"

# Block attempts to access logs without proper authentication
SecRule REQUEST_URI "@contains /logs" \
    "id:10021,\
    phase:1,\
    pass,\
    msg:'Log access attempt',\
    setvar:ip.log_requests=+1,\
    expirevar:ip.log_requests=300"

SecRule IP:LOG_REQUESTS "@gt 50" \
    "id:10022,\
    phase:1,\
    block,\
    msg:'Too many log requests',\
    logdata:'Requests: %{ip.log_requests}, Remote: %{REMOTE_ADDR}',\
    expirevar:ip.log_requests=3600"

# === API SECURITY ===

# Prevent API key leakage in responses
SecRule RESPONSE_BODY "@rx (?i)(buildkite[_-]?token|buildkite[_-]?key|api[_-]?key)" \
    "id:10030,\
    phase:4,\
    block,\
    msg:'Potential API key leakage in response',\
    logdata:'Response contains potential API key'"

# Block attempts to access internal API endpoints
SecRule REQUEST_URI "@beginsWith /api/" \
    "id:10031,\
    phase:1,\
    block,\
    msg:'Access to restricted internal API',\
    logdata:'URI: %{REQUEST_URI}',\
    chain"
SecRule REQUEST_URI "@rx /api/(internal|admin|debug)"

# === BADGE ENDPOINT PROTECTION ===

# Skip rate limiting for badges from trusted GitHub sources (pages with ~1000 badges)
SecRule REQUEST_URI "@beginsWith /api/badge/" \
    "id:10039,\
    phase:1,\
    pass,\
    msg:'Badge request from trusted GitHub source - bypassing rate limits',\
    logdata:'Referer: %{REQUEST_HEADERS.Referer}',\
    chain,\
    ctl:ruleRemoveById=10040,\
    ctl:ruleRemoveById=10041"
SecRule REQUEST_HEADERS:Referer "@rx ^https?://([^/]*\.)?(github\.com|giellalt\.github\.io)"

# Allow higher rate limits for badge endpoints (they're public)
SecRule REQUEST_URI "@beginsWith /api/badge/" \
    "id:10040,\
    phase:1,\
    pass,\
    msg:'Badge endpoint access',\
    setvar:ip.badge_requests=+1,\
    expirevar:ip.badge_requests=60"

# Still block excessive badge requests (DDoS protection)
SecRule IP:BADGE_REQUESTS "@gt 200" \
    "id:10041,\
    phase:1,\
    block,\
    msg:'Excessive badge requests',\
    logdata:'Requests: %{ip.badge_requests}, Remote: %{REMOTE_ADDR}',\
    expirevar:ip.badge_requests=300"

# === ATTACK PATTERN DETECTION ===

# Block common attack tools and scanners
SecRule REQUEST_HEADERS:User-Agent "@rx (?i)(sqlmap|nmap|nikto|dirb|gobuster|ffuf|burpsuite|owasp.zap)" \
    "id:10050,\
    phase:1,\
    block,\
    msg:'Security scanner detected',\
    logdata:'User-Agent: %{REQUEST_HEADERS.User-Agent}'"

# Block requests with suspicious paths
SecRule REQUEST_URI "@rx (?i)(\.\./|\.\.\\\\|/etc/passwd|/proc/|cmd\.exe|powershell)" \
    "id:10051,\
    phase:1,\
    block,\
    msg:'Directory traversal or command injection attempt',\
    logdata:'URI: %{REQUEST_URI}'"

# Block requests trying to access sensitive files
SecRule REQUEST_URI "@rx (?i)\.(env|git|ssh|aws|config|key|pem|p12|jks)$" \
    "id:10052,\
    phase:1,\
    block,\
    msg:'Attempt to access sensitive file',\
    logdata:'URI: %{REQUEST_URI}'"

# === BRUTE FORCE PROTECTION ===

# Track failed authentication attempts
SecRule RESPONSE_STATUS "@beginsWith 40" \
    "id:10060,\
    phase:5,\
    pass,\
    msg:'Failed request',\
    setvar:ip.failed_requests=+1,\
    expirevar:ip.failed_requests=300"

# Block IPs with too many failed requests
SecRule IP:FAILED_REQUESTS "@gt 20" \
    "id:10061,\
    phase:1,\
    block,\
    msg:'Too many failed requests - possible brute force',\
    logdata:'Failed requests: %{ip.failed_requests}, Remote: %{REMOTE_ADDR}',\
    expirevar:ip.failed_requests=1800"

# === REQUEST SIZE LIMITS ===

# Block excessively large requests (except webhooks which are handled separately)
SecRule REQUEST_URI "!@beginsWith /api/webhooks/" \
    "id:10070,\
    phase:1,\
    block,\
    msg:'Request too large',\
    logdata:'Content-Length: %{REQUEST_HEADERS.Content-Length}',\
    chain"
SecRule REQUEST_HEADERS:Content-Length "@gt 1048576"

# === CUSTOM WHITELIST ===

# Allow GitHub IPs for webhooks (optional - uncomment and update IPs as needed)
# SecRule REMOTE_ADDR "@ipMatchFromFile /etc/nginx/github-ips.txt" \
#     "id:10080,\
#     phase:1,\
#     pass,\
#     msg:'GitHub webhook IP whitelist',\
#     ctl:ruleRemoveById=10001-10003"