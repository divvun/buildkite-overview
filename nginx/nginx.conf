user www-data;
worker_processes auto;
pid /var/run/nginx.pid;

# Load ModSecurity module
load_module modules/ngx_http_modsecurity_module.so;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Real IP configuration for proxied requests
    set_real_ip_from 172.18.0.0/16;  # Trust Docker network
    set_real_ip_from 10.0.0.0/8;     # Trust private networks
    set_real_ip_from 192.168.0.0/16; # Trust private networks
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;

    # Rate limiting zones (using real client IP)
    limit_req_zone $remote_addr zone=general:10m rate=30r/s;
    limit_req_zone $remote_addr zone=auth:10m rate=5r/s;
    limit_req_zone $remote_addr zone=webhooks:10m rate=200r/s;
    limit_req_zone $remote_addr zone=badges:10m rate=30r/s;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' fonts.googleapis.com; style-src 'self' 'unsafe-inline' fonts.googleapis.com; font-src 'self' fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self'; frame-ancestors 'none';" always;

    server {
        listen 80;
        server_name _;

        # ModSecurity
        modsecurity on;
        modsecurity_rules_file /etc/nginx/modsecurity.conf;

        # General rate limiting
        limit_req zone=general burst=50 nodelay;

        # Proxy settings
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 60s;

        # All CSS and JS files - no rate limiting
        location ~* \.(css|js)$ {
            proxy_pass http://app:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 60s;
            add_header Cache-Control "public, max-age=3600";
        }

        # Fresh framework static assets - no rate limiting  
        location /_fresh/ {
            proxy_pass http://app:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 60s;
            add_header Cache-Control "public, max-age=3600";
        }

        # WebAwesome assets - no rate limiting
        location /webawesome/ {
            proxy_pass http://app:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 60s;
            add_header Cache-Control "public, max-age=3600";
        }

        # Static files (serve directly from nginx if they exist)
        location /static/ {
            alias /app/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Auth endpoints - stricter rate limiting
        location /auth/ {
            limit_req zone=auth burst=10 nodelay;
            proxy_pass http://app:8000;
        }

        # Webhook endpoints - special handling
        location /api/webhooks/ {
            limit_req zone=webhooks burst=200 nodelay;
            
            # Validate content type
            if ($content_type !~ "application/json") {
                return 415;
            }
            
            proxy_pass http://app:8000;
        }

        # Badge endpoints - public, higher rate limits
        location /api/badge/ {
            limit_req zone=badges burst=100 nodelay;
            
            # Allow CORS for badges
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET" always;
            
            proxy_pass http://app:8000;
        }

        # API endpoints - general rate limiting
        location /api/ {
            limit_req zone=general burst=50 nodelay;
            proxy_pass http://app:8000;
        }

        # All other requests
        location / {
            limit_req zone=general burst=50 nodelay;
            proxy_pass http://app:8000;
        }

        # Health check endpoint (no rate limiting)
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }

        # Block common attack patterns
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~* \.(env|conf|config|log|bak|backup|swp|tmp)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
}